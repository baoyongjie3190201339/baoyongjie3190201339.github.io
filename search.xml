<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>物联网实践</title>
      <link href="/2023/05/10/mqtt/"/>
      <url>/2023/05/10/mqtt/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大二时做了一个物联网的项目，没想到大四毕业设计也是物联网方向，写一篇记录一下一些基本过程吧，大二的项目是GPS+MQTT+微信小程序，GPS获取经纬度通过ESP8266上传到云服务器，然后微信小程序获取经纬度信息，在小程序里显示出当前位置的地图。毕业设计是一个环境的监测系统。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>说到物联网，首先必须得提到两个东西。第一个是<code>无线通信模块</code>这里我用的是国产的ESP8266-01S，01好像是得加一个上拉电阻才能用，这里无线通信还有比如<code>NB-IoT</code>等，无线通信模块的作用是接入互联网。第二个就是<code>通信协议</code>，最熟知的网络协议应该是<code>TCP/IP协议</code>。而在我们物联网中，最常用的是<code>MQTT协议</code>，<code>MQTT协议</code>是一个基于应用层的<code>TCP/IP协议</code>具体什么意思可以去了解一下网络协议，而<code>MQTT协议</code>就是我们物联网通信的规范。我们只需要知道这两个东西就行。想具体了解<code>MQTT协议</code>可以去看这篇博客 <a href="http://t.csdn.cn/d55sH">博客地址</a></p><h1 id="基础工作"><a href="#基础工作" class="headerlink" title="基础工作"></a>基础工作</h1><p>这里的准备工作是指完成STM32基础的开发，比如OLED屏幕外设驱动的移植，DHT11温湿度传感器等等，由于需求不同，我就不再赘述。</p><h1 id="MQTT相关内容的移植"><a href="#MQTT相关内容的移植" class="headerlink" title="MQTT相关内容的移植"></a>MQTT相关内容的移植</h1><p>MQTT的代码我们不可能自己去写，咱也没那个能力。其实这些东西早就有大佬给我们写好了，我们找到这些东西就行。<br>首先我们搜索<a href="https://open.iot.10086.cn/">OneNET</a>，进入网页的论坛，在搜索框找到OneNET开发板代码、资料，<a href="https://open.iot.10086.cn/bbs/thread-863-1-1.html">点这里</a>，然后打开百度网盘，下载OneNET标准版3.2的裸机-基础教程的代码，如下图<br><img src="/img/45.png" alt="1"></p><p>解压后我们打开MQTT-例程，里面的<code>esp8266.c文件</code>、<code>esp8266.h文件</code>、<code>MQTTKit.c文件</code>、<code>MQTTKit.h文件</code>、<code>onenet.c文件</code>、<code>onenet.h文件</code>就是我们所需要的文件，移植到我们自己的工程里，怎么移植我也不赘述了，移植好后工程文件如下<br><img src="/img/46.png" alt="1"><br>在这里我们也感谢一下这些白嫖代码的作者：张继瑞同志</p><h1 id="配置程序实现数据上传至MQTT服务器"><a href="#配置程序实现数据上传至MQTT服务器" class="headerlink" title="配置程序实现数据上传至MQTT服务器"></a>配置程序实现数据上传至MQTT服务器</h1><h2 id="Topic配置及订阅"><a href="#Topic配置及订阅" class="headerlink" title="Topic配置及订阅"></a>Topic配置及订阅</h2><p>我们首先需要加两个东西，订阅命令的Topic以及上行数据的Topic<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const char *devSubTopic[] = &#123;&quot;/mysmarthome1/sub&quot;&#125;;  #设备上行数据Topic</span><br><span class="line">const char devPubTopic[] = &quot;/mysmarthome1/pub&quot;;     #设备订阅的Topic</span><br></pre></td></tr></table></figure></p><p>在初始化结束加上这个函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OneNet_Subscribe(devSubTopic, 1);</span><br></pre></td></tr></table></figure></p><p>我们打开这个函数，可以看到这个函数的作用就是订阅我们在前面配置的Topic<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void OneNet_Subscribe(const char *topics[], unsigned char topic_cnt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">unsigned char i = 0;</span><br><span class="line"></span><br><span class="line">MQTT_PACKET_STRUCTURE mqttPacket = &#123;NULL, 0, 0, 0&#125;;//协议包</span><br><span class="line"></span><br><span class="line">for(; i &lt; topic_cnt; i++)</span><br><span class="line">UsartPrintf(USART_DEBUG, &quot;Subscribe Topic: %s\r\n&quot;, topics[i]);</span><br><span class="line"></span><br><span class="line">if(MQTT_PacketSubscribe(MQTT_SUBSCRIBE_ID, MQTT_QOS_LEVEL0, topics, topic_cnt, &amp;mqttPacket) == 0)</span><br><span class="line">&#123;</span><br><span class="line">ESP8266_SendData(mqttPacket._data, mqttPacket._len);//向平台发送订阅请求</span><br><span class="line"></span><br><span class="line">MQTT_DeleteBuffer(&amp;mqttPacket);//删包</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="esp8266接入互联网"><a href="#esp8266接入互联网" class="headerlink" title="esp8266接入互联网"></a>esp8266接入互联网</h2><p>在这一步，我们需要配置两个东西，第一个是我们<code>WIFI的名称以及密码</code>，注意WIFI必须为<code>2.4GHZ</code>，并且连接过程中不需要登录操作，校园网就不行。<br>在<code>esp8266.c</code>中修改<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define ESP8266_WIFI_INFO&quot;AT+CWJAP=\&quot; 这里填你的WIFI名称 \&quot;,\&quot; 你的WIFI密码 \&quot;\r\n&quot;</span><br></pre></td></tr></table></figure><br>第二个是配置我们订阅的<code>MQTT服务器的IP地址</code>以及<code>端口号</code>，这里如果想用自己的服务器，得买一个域名，配置ssl证书，最重要的是得进行<code>ICP备案</code>，整个过程有点复杂，后续可能会专门写一篇教程。这里我们其实用免费的就好，不过你后续微信小程序要发布的话，必须得用自己的服务器并且备案。<br>这里我们大陆MQTT的<a href="https://www.emqx.io/zh">官网</a>，找到MQTT下面的<code>公共MQTT服务器</code>，如图<br><img src="/img/47.png" alt="1"><br>这个Broker就是域名，我们在<code>esp8266.c</code>中修改<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define ESP8266_ONENET_INFO&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;域名\&quot;,端口号\r\n&quot;</span><br></pre></td></tr></table></figure><br>这里端口号填1883</p><p>单片机控制esp8266是通过串口发送AT指令，这里我们看一下ESP8266的初始化代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">void ESP8266_Init(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_Initure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);   //ESP8266复位引脚配置</span><br><span class="line">GPIO_Initure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">GPIO_Initure.GPIO_Pin = GPIO_Pin_14;//GPIOC14-复位</span><br><span class="line">GPIO_Initure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOC, &amp;GPIO_Initure);</span><br><span class="line"></span><br><span class="line">GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_RESET);</span><br><span class="line">delay_ms(250);</span><br><span class="line">GPIO_WriteBit(GPIOC, GPIO_Pin_14, Bit_SET);</span><br><span class="line">delay_ms(500);</span><br><span class="line"></span><br><span class="line">ESP8266_Clear();</span><br><span class="line"></span><br><span class="line">UsartPrintf(USART_DEBUG, &quot;0. AT\r\n&quot;);        //测试AT指令</span><br><span class="line">while(ESP8266_SendCmd(&quot;AT\r\n&quot;, &quot;OK&quot;))</span><br><span class="line">delay_ms(500);</span><br><span class="line"></span><br><span class="line">UsartPrintf(USART_DEBUG, &quot;1. RST\r\n&quot;);       //ESP8266模块进行重启</span><br><span class="line">ESP8266_SendCmd(&quot;AT+RST\r\n&quot;, &quot;&quot;);</span><br><span class="line">delay_ms(500);</span><br><span class="line">ESP8266_SendCmd(&quot;AT+CIPCLOSE\r\n&quot;, &quot;&quot;);       //关闭单连接模式下的 TCP/UDP/SSL 连接</span><br><span class="line">delay_ms(500);</span><br><span class="line">UsartPrintf(USART_DEBUG, &quot;2. CWMODE\r\n&quot;);    //进入station模式</span><br><span class="line">while(ESP8266_SendCmd(&quot;AT+CWMODE=1\r\n&quot;, &quot;OK&quot;))  </span><br><span class="line">delay_ms(500);</span><br><span class="line"></span><br><span class="line">UsartPrintf(USART_DEBUG, &quot;3. AT+CWDHCP\r\n&quot;);  //启用DHCP（动态主机配置协议）</span><br><span class="line">while(ESP8266_SendCmd(&quot;AT+CWDHCP=1,1\r\n&quot;, &quot;OK&quot;))</span><br><span class="line">delay_ms(500);</span><br><span class="line"></span><br><span class="line">UsartPrintf(USART_DEBUG, &quot;4. CWJAP\r\n&quot;);      //连接设定的WIFI</span><br><span class="line">while(ESP8266_SendCmd(ESP8266_WIFI_INFO, &quot;GOT IP&quot;))</span><br><span class="line">delay_ms(500);</span><br><span class="line"></span><br><span class="line">UsartPrintf(USART_DEBUG, &quot;5. CIPSTART\r\n&quot;);   //连接服务器</span><br><span class="line">while(ESP8266_SendCmd(ESP8266_ONENET_INFO, &quot;CONNECT&quot;))</span><br><span class="line">delay_ms(500);</span><br><span class="line"></span><br><span class="line">UsartPrintf(USART_DEBUG, &quot;6. ESP8266 Init OK\r\n&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>所有配置完成后，我们打开串口助手查看ESP8266的连接<br><img src="/img/48.png" alt="1"><br>这样则连接成功，失败的话可以重新上电或者长按复位按键</p><p>我们在main函数的循环里加入<code>OneNet_Publish(devPubTopic, PUB_BUF);</code>函数，PUB_BUF为上传的内容数组</p><h2 id="使用MQTT-fx软件查看发布内容"><a href="#使用MQTT-fx软件查看发布内容" class="headerlink" title="使用MQTT.fx软件查看发布内容"></a>使用MQTT.fx软件查看发布内容</h2><p>我们下载一个MQTT.fx软件，进行调试<br>新建一个项目<br><img src="/img/49.png" alt="1"><br>在Broker.address中填入公共服务器的地址，进行连接<br>在Subscribe中填入之前配置的订阅topic进行订阅<br><img src="/img/50.png" alt="1"><br>能看到我们单片机上采集的数据，这部分配置程序实现数据上传至MQTT服务器就到这</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> STM32 </tag>
            
            <tag> 物联网 </tag>
            
            <tag> MQTT协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复刻Super Dial电机旋钮屏</title>
      <link href="/2023/03/19/super/"/>
      <url>/2023/03/19/super/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>几天前在bilibili刷到了电机旋钮屏的项目，觉得可玩性高，便打算复刻一个</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>灵感来源与国外的<code>smart konb</code>，制作初衷为制作一个桌面力反馈旋钮，可实现与<code>surface dial</code>一样的功能。<br>开源协议: Public Domain</p><h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>灵感来源与国外的smart konb，制作初衷为制作一个桌面力反馈旋钮，可以与电脑进行交互。项目从最重要的电机入手，选择了量大便宜的3205电机（小米云台电机的库存货），在结构上实现上下等大，增加实用功能蓝牙hid（轮盘功能），可实现与<code>surface dial</code>一样的功能。</p><h1 id="制作说明"><a href="#制作说明" class="headerlink" title="制作说明"></a>制作说明</h1><p>附件在gitee <a href="https://gitee.com/coll45/super-dial-motor-knob-screen">下载地址</a></p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>硬件部分为三块pcb,一块主控板，一块驱动板，一块屏幕固定驱动板</p><p><img src="/img/41.png" alt="1"></p><center>主控板</center><p><img src="/img/42.png" alt="1"></p><center>电机驱动板</center><p><img src="/img/43.png" alt="1"></p><center>屏幕驱动板</center><p>PCB工程 <a href="https://oshwhub.com/45coll/a2fff3c71f5d4de2b899c64b152d3da5">下载地址</a></p><h2 id="3D打印"><a href="#3D打印" class="headerlink" title="3D打印"></a>3D打印</h2><p>打印件可以通过三维猴打印，直接上传<code>3D打印和CNC模型-by虫二</code>文件夹内的stl即可，一共四个打印件（选择外壳cnc就用cnc的step）<br><img src="/img/44.png" alt="1"></p><h2 id="代码烧录"><a href="#代码烧录" class="headerlink" title="代码烧录"></a>代码烧录</h2><p>打开附件文件夹内的<code>bin/flash_download_tool_3.9.2.exe</code> 选择esp32s3，其他什么都不改（super_dial_v2.bin烧录到0x0位置）。然后通过usb-ttl连接到主控板，tx-rx rx-tx gnd -gnd，连接完成之后，按住boot按钮（sw1）然后接入typec亮起3.3v指示灯，然后松开boot按钮，点start开始烧录。烧录完成后拔掉typec 再次插入就可以看见效果</p><p>USB烧录方法：打开附件文件夹内的<code>bin/flash_download_tool_3.9.2.exe</code> 选择esp32s3，loadmod改成USB其他什么都不改（super_dial_v2.bin烧录到0x0位置），先按住boot键，然后USB数据线连接。点start开始烧录。烧录完成后拔掉typec 再次插入就可以看见效果</p><p>OTA烧录方法（只限于烧录过程序，但是想更新最新固件）：旋钮进入设置界面（wifi界面，有圆圈在转动的）然后连接esp32的wifi热点。连接成功后打开浏览器输入192.168.4.1进入界面选择文件夹/bin/OTA/ota_v2.bin。点击上传即可，上传过程中会出现转圈卡顿的情况表示正常上传，上传完成后会自动重启。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>在Gitee附件中</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> ESP32 </tag>
            
            <tag> Super Dial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netlify自定义域名</title>
      <link href="/2023/03/01/yuming/"/>
      <url>/2023/03/01/yuming/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Netlify托管个人博客后，Netlify会默认给我们生成一个域名，但是这个域名没有任何意义且复杂。我们可以自定义这个域名。</p><h1 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h1><p>首先需要购买一个自己的域名，可以在阿里云，腾讯云等购买，博主的域名在阿里云购买，价格为8元/年<br><img src="/img/28.png" alt="1"><br>等待域名实名认证<br><img src="/img/29.png" alt="1"></p><h1 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h1><p>在Netlify上添加自定义域名<br><img src="/img/30.png" alt="1"></p><p>去域名控制台解析一条CNAME记录，记录值为你的Netlify生成的域名，生成二级域名<br><img src="/img/31.png" alt="1"></p><h1 id="添加SSL"><a href="#添加SSL" class="headerlink" title="添加SSL"></a>添加SSL</h1><p>此时的博客在访问时会有网站不安全的标志，我们需要添加<code>SSL证书</code><br>Netlify也提供免费证书发放服务，点击<code>Let&#39;s Encrypt</code>申请证书<br><img src="/img/32.png" alt="1"></p><p>等待证书发放，这样就可以通过购买的域名访问博客</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> Netlify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建个人博客</title>
      <link href="/2023/02/25/blog/"/>
      <url>/2023/02/25/blog/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>历时两天，终于将博客搭建成功，第一篇博客不知道写什么，就写一下如何用Hexo+Github搭建属于自己的博客</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h3 id="安装Git-Bash"><a href="#安装Git-Bash" class="headerlink" title="安装Git Bash"></a>安装Git Bash</h3><p>Git Bash <a href="https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe">下载地址</a></p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Node.js <a href="https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi">下载地址</a></p><h3 id="检查是否成功安装"><a href="#检查是否成功安装" class="headerlink" title="检查是否成功安装"></a>检查是否成功安装</h3><p>打开cmd(命令提示符)输入以下代码进行检查<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v </span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><br>若成功安装，则会出现以下类似的版本号<br><img src="/img/3.png" alt="1"><br>打开cmd安装Hexo<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p><h3 id="github仓库配置"><a href="#github仓库配置" class="headerlink" title="github仓库配置"></a>github仓库配置</h3><p>github注册就不在此赘述了，请自行百度</p><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><p>新建一个仓库,名称为<font style="background:lightgrey;color:tomato">你的用户名.github.io</font>,例如你的github用户名为<font style="background:lightgrey;color:tomato">byj</font>，则你需要建的名称为<font style="background:lightgrey;color:tomato">byj.github.io</font></p><h4 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a>生成SSH Keys</h4><p>打开任意一个文件夹，右键运行Git Bash Here<br><img src="/img/5.png" alt="1"><br>进入Git页面<br><img src="/img/4.png" alt="1"><br>输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh     #检查是否安装了ssh   </span><br></pre></td></tr></table></figure><p>生成ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -keygen -t rsa -C &quot;你的邮件地址&quot;    </span><br></pre></td></tr></table></figure><p><font style="background:lightgrey;color:tomato">输入后需要敲4次回车</font><br>见到如下内容则代表成功<br><img src="/img/6.png" alt="1"><br>打开C盘下的Users文件夹，打开Administrator文件夹，找到<font style="background:lightgrey;color:tomato">.ssh</font>文件夹，打开id_rsa.pub文件，复制其中的秘钥<br>将秘钥复制进Git Hub中，如图<br><img src="/img/7.png" alt="1"><br><img src="/img/8.png" alt="1"><br><img src="/img/9.png" alt="1"></p><h1 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h1><p>在Git Bash中依次输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init     #初始化Hexo博客   </span><br><span class="line">hexo g        #生成博客</span><br><span class="line">hexo s        #生成静态本地博客页面</span><br></pre></td></tr></table></figure><br>此时会看到Git Bash给了你一个网址<br><img src="/img/11.png" alt="1"><br>通过该网址即可进入你的本地博客<br><img src="/img/12.png" alt="1"><br>接下来，就需要将我们的博客文件上传至GitHub仓库了</p><h1 id="上传至GitHub"><a href="#上传至GitHub" class="headerlink" title="上传至GitHub"></a>上传至GitHub</h1><p>打开Blog根目录下的<font style="background:lightgrey;color:tomato">_config.yml</font>文件，翻至最后，修改deploy配置如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:你的github名字/你的github名字.github.io.git   #不会可直接复制下图红圈填在这</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><br><img src="/img/13.png" alt="1"><br>安装hexo-deployer-git自动部署发布工具<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><br>依次执行以下三条指令</p><p><font style="background:lightgrey;color:tomato">hexo clean</font></p><p><font style="background:lightgrey;color:tomato">hexo g</font></p><p><font style="background:lightgrey;color:tomato">hexo d</font><br>在弹出的Git Hub登陆界面输入账号和密码<br>随后会提示让你输入令牌</p><h1 id="获取GitHub令牌"><a href="#获取GitHub令牌" class="headerlink" title="获取GitHub令牌"></a>获取GitHub令牌</h1><p>在github中找到settings<br>进入Developer settings<br><img src="/img/14.png" alt="1"><br>新建一个令牌<br><img src="/img/15.png" alt="1"><br>在之前弹出的登陆界面粘贴刚才生成的令牌<br>等待上传成功</p><h1 id="进入博客"><a href="#进入博客" class="headerlink" title="进入博客"></a>进入博客</h1><p>进入你的github博客仓库，进入settings<br><img src="/img/16.png" alt="1"><br>进入Pages获得你的博客网址<br><img src="/img/17.png" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netlify部署博客</title>
      <link href="/2023/02/25/%E5%8A%A0%E9%80%9F/"/>
      <url>/2023/02/25/%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Github Pages部署的博客具有一个很大的问题就是GitHub服务器在国外，所以国内访问速度很慢。如何简单快速又低成本的解决这个问题呢？我采用的是<font style="background:lightgrey;color:tomato">Netlify</font></p><p><font style="background:lightgrey;color:tomato">Netlify</font>是一家提供静态网站托管的综合平台，支持自动从Github等仓库拉取代码并构建成静态网站进行发布，同时也支持自定义域名，自动申请SSL证书等功能，更为重要的是自动启用CDN加速，访问速度会快很多</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>这里只需要一个Git Hub账号<br>进入Netlify官网，使用Git Hub账号注册<br><img src="/img/19.png" alt="1"><br><img src="/img/20.png" alt="1"></p><h1 id="创建站点"><a href="#创建站点" class="headerlink" title="创建站点"></a>创建站点</h1><p><img src="/img/21.png" alt="1"><br>选择GitHub代码托管<br><img src="/img/22.png" alt="1"><br>选择你的博客仓库，完善信息，点击Deploy site，系统就会自动编译你的静态页面<br><img src="/img/23.png" alt="1"></p><h1 id="获取站点地址"><a href="#获取站点地址" class="headerlink" title="获取站点地址"></a>获取站点地址</h1><p><img src="/img/24.png" alt="1"><br>通过这个地址你就能访问你的博客，速度会有很大提升</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> Netlify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/2023/02/24/%E4%BB%A3%E7%A0%81%E5%9D%97/%E6%BC%94%E7%A4%BA/"/>
      <url>/2023/02/24/%E4%BB%A3%E7%A0%81%E5%9D%97/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个文章</title>
      <link href="/2023/02/24/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%96%87%E7%AB%A0/"/>
      <url>/2023/02/24/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2023/02/24/hello-world/"/>
      <url>/2023/02/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
